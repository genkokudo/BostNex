@page "/trpg"
@page "/trpg/{pagedata}"
@using BostNex.Data
@using BostNex.Services
@using BostNex.Pages.Component
@using BostNexShared.Dto;
@inject IOpenAiService _openAi
@inject ITrpgService _trpg
@inject ITrpgFormatService _format;

<PageTitle>@(_display?.Title ?? "Loading")</PageTitle>

@if (!isLoaded)
{
    <p><em>Loading...</em></p>
    return;
}
else if (_display == null)
{
    <h1>どこにアクセスしとんねん😡</h1>
    return;
}
@* TODO:_display.Optionがある場合は、入力完了してから開始すること *@
@*
    Optionsをコンポーネントに渡す。
    コンポーネントは、Optionsを元に、入力フォームを作成する。
    決定ボタンを1つ付ける。
    決定ボタンを押すと、入力フォームの内容をサーバーに送信する（InitializeChatを呼ぶ）。
*@
@if (_display.Options.Count > 0)
{
    return;
}

<h1>@_display.Headline</h1>
<p><em>@_display.Introduction</em></p>

@* セッションの表示 *@
@foreach (var log in backlogs)
{
    //  物語の進行ごとに、繰り返して表示する
    <TrpgSessionPanel Session="log" OnSubmitFinished="() => NextSession()" Placeholder="@_display.Placeholder" SubmitText="@_display.SubmitText" />
}
<DebugPanel ChatLog="_openAi.ChatLog" />

@* ここに入力欄を作成 *@
@if (!_format.IsDebugMode)
{
    return;
}
<PromptPanel OnClickCallback="ResetPrompt" @bind-Text="ResetPromptText" />

@code {
    [Parameter]
    public string? Pagedata { get; set; }

    private Display? _display;
    private bool isLoaded = false;

    /// <summary>
    /// 今までのセッション
    /// </summary>
    private List<TrpgSession> backlogs = new();

    protected override void OnParametersSet()
    {
        // 初期化
        isLoaded = false;
        _display = null;
        backlogs.Clear();
        base.OnParametersSet();

        // パラメータ違いの同じ画面に遷移した場合は、OnInitializedが実行されず、ここが実行されるので注意。
        if (!string.IsNullOrWhiteSpace(Pagedata) && _format.PageData.TryGetValue(Pagedata, out _display!))
        {
            // 人格をセット
            _openAi.InitializeChat(_display.MasterPrompt);  // TODO:画面情報を渡すように変更

            // 入力欄を作成
            backlogs.Add(new TrpgSession());
        }
        else
        {
            // 指定されたデータが見つからなかった時
            _display = null;
        }
        isLoaded = true;
        base.OnParametersSet();
    }

    /// <summary>
    /// 子コンポーネントでAIメッセージを受信し終わった時の処理
    /// 終了判定
    /// 次のセッションを作成
    /// </summary>
    private void NextSession()
    {
        backlogs.Add(new TrpgSession());
        StateHasChanged();
    }


    public string ResetPromptText { get; set; } = string.Empty;
    /// <summary>
    /// 開発用
    /// プロンプトを入力されたものに差し替えて再スタート
    /// </summary>
    private void ResetPrompt(string text)
    {
        _openAi.InitializeChat(text);
        backlogs.Clear();
        backlogs.Add(new TrpgSession());
        StateHasChanged();
    }

}

