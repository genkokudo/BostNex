@page "/trpg"
@page "/trpg/{pagedata}"
@using BostNex.Data
@using BostNex.Services
@using BostNex.Pages.Component
@using BostNexShared.Dto;
@inject IOpenAiService _openAi
@inject ITrpgService _trpg
@inject ITrpgFormatService _format;

<PageTitle>@(_display?.Title ?? "Loading")</PageTitle>

@if (!isLoaded)
{
    <p><em>Loading...</em></p>
    return;
}
else if (_display == null)
{
    <h1>どこにアクセスしとんねん😡</h1>
    return;
}

@if (_display.Options.Count > 0 && !isSubmittedOptions)
{
    // _display.Optionがある場合は、入力完了してから開始する
    <h2>始める前に設定項目を入力するんだ</h2>
    foreach (var option in _display.Options)
    {
        <div class="row">
            <div class="col-12">
                <h3>@option.Subject</h3>
                <InputText @bind-Value="option.Value" rows="@option.Rows"></InputText>
            </div>
        </div>
    }
    // 決定ボタンを押すと、入力フォームの内容をサーバーに送信する（InitializeChatを呼ぶ）。
    <div class="row">
        <div class="col-4">
            <button class="mt-3 btn btn-primary" @onclick="SubmitOption">決定</button>
        </div>
    </div>
    return;
}

<h1>@_display.Headline</h1>
<p><em>@_display.Introduction</em></p>

@* セッションの表示 *@
@{
    // 現在有効なチャットに含まれているか確認する
    var currentChat = _openAi.ChatLog.Where(x => x.Role == ChatRoles.assistant.ToString()).Select(x => x.Content).ToList();  // AIの返答のみで判定
    foreach (var log in backlogs)
    {
        //  物語の進行ごとに、繰り返して表示する
        <TrpgSessionPanel Session="log" OnSubmitFinished="(bool isExistContinuation) => NextSession(isExistContinuation)" Placeholder="@_display.Placeholder" SubmitText="@_display.SubmitText" CurrentChat="currentChat" />
    }
}

@* ここからデバッグモード *@
@if (!_format.IsDebugMode)
{
    return;
}

@* 現在のチャットログ表示 *@
<DebugPanel ChatLog="_openAi.ChatLog" />

@* 入力欄 *@
<PromptPanel OnClickCallback="ResetPrompt" @bind-Text="ResetPromptText" />

@code {
    [Parameter]
    public string? Pagedata { get; set; }

    private Display? _display;
    private bool isLoaded = false;
    private bool isSubmittedOptions = false;

    /// <summary>
    /// 今までのセッション
    /// </summary>
    private List<TrpgSession> backlogs = new();

    protected override void OnParametersSet()
    {
        // 初期化
        isLoaded = false;
        _display = null;
        isSubmittedOptions = false;
        backlogs.Clear();
        base.OnParametersSet();

        // パラメータ違いの同じ画面に遷移した場合は、OnInitializedが実行されず、ここが実行されるので注意。
        if (!string.IsNullOrWhiteSpace(Pagedata) && _format.PageData.TryGetValue(Pagedata, out _display!))
        {
            // 人格をセット
            _openAi.InitializeChat(_display);

            // 入力欄を作成
            backlogs.Add(new TrpgSession());
        }
        else
        {
            // 指定されたデータが見つからなかった時
            _display = null;
        }
        isLoaded = true;
        base.OnParametersSet();
    }

    /// <summary>
    /// 設定項目の入力完了
    /// </summary>
    private void SubmitOption()
    {
        isSubmittedOptions = true;
        _openAi.InitializeChat(_display!);
        StateHasChanged();
    }

    /// <summary>
    /// 子コンポーネントでAIメッセージを受信し終わった時の処理
    /// 終了判定
    /// 次のセッションを作成
    /// </summary>
    private void NextSession(bool isExistContinuation)
    {
        backlogs.Add(new TrpgSession());
        StateHasChanged();
    }


    public string ResetPromptText { get; set; } = string.Empty;
    /// <summary>
    /// 開発用
    /// プロンプトを入力されたものに差し替えて再スタート
    /// </summary>
    private void ResetPrompt(string text)
    {
        _openAi.InitializeChat(text);
        backlogs.Clear();
        backlogs.Add(new TrpgSession());
        StateHasChanged();
    }

}

