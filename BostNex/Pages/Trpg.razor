@page "/trpg"
@page "/trpg/{pagedata}"
@using Azure.AI.OpenAI;
@using BostNex.Data
@using BostNex.Services
@using BostNex.Pages.Component
@using BostNexShared.Dto
@using Microsoft.Extensions.Options
@inject IOpenAiService _openAi
@inject ITrpgService _trpg
@inject ITrpgFormatService _format
@inject IJSRuntime JS
@inject IOptions<OpenAiOption> _options

@* デバッグモード *@
<DebugPanel IsVisible="_display != null && _format.IsDebugMode">
    <Collapse @bind-IsCollapsed="IsCollapsed">
        @* 現在のチャットログ表示 *@
        <ChatGptLogPanel Logs="_openAi.ChatLog" />
        @* プロンプト入力欄 *@
        <PromptPanel OnClickCallback="ResetPrompt" @bind-Text="ResetPromptText">
            <h3>プロンプトの入力</h3>
            <p>チャットログをリセットしてプロンプトを再設定します。<br />@(_options.Value.Separate)で区切ることでUserとAssistantも入力できます。</p>
        </PromptPanel>
    </Collapse>
</DebugPanel>

<PageTitle>@(_display?.Title ?? "Loading")</PageTitle>

@if (!isLoaded)
{
    <div class="spinner-border text-primary">
        <span class="visually-hidden">Loading...</span>
    </div>
    return;
}
else if (_display == null)
{
    <h1>どこにアクセスしとんねん😡</h1>
    return;
}

@* 設定項目があるセッションの場合表示 *@
@if (IsRequiredInputOption)
{
    <OptionPanel IsVisible="IsRequiredInputOption" Action="SubmitOption" Options="_display.Options"></OptionPanel>
    return;
}

<h1>@_display.Headline</h1>
<p><em>@_display.Introduction</em></p>

@* セッションの表示 *@
@{
    // 現在有効なチャットに含まれているか確認する
    var currentChat = _openAi.ChatLog.Where(x => x.Role == ChatRole.Assistant).Select(x => x.Content).ToList();  // AIの返答のみで判定
    foreach (var log in backlogs)
    {
        //  物語の進行ごとに、繰り返して表示する
        <TrpgSessionPanel Session="log" OnSubmitFinished="() => NextSession()" Placeholder="@_display.Placeholder" SubmitText="@_display.SubmitText" CurrentChat="currentChat" />
    }
}

@* TODO:入力欄をこっちに出す。キーボードショートカットに対応させるために。 *@
<div class="my-5"></div>

@code {
    [Parameter]
    public string? Pagedata { get; set; }

    // デバッグモード用
    public bool IsCollapsed { get; set; } = true;

    private Display? _display;
    private bool isLoaded = false;
    private bool isSubmittedOptions = false;
    private bool IsRequiredInputOption { get => _display != null && _display.Options.Count > 0 && !isSubmittedOptions; }

    private IJSObjectReference? _jsModule = null!;
    /// <summary>
    /// 今までのセッション
    /// </summary>
    private List<TrpgSession> backlogs = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_jsModule == null) _jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/Trpg.razor.js");
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnParametersSet()
    {
        // 初期化
        isLoaded = false;
        _display = null;
        isSubmittedOptions = false;
        IsCollapsed = true;
        backlogs.Clear();
        base.OnParametersSet();

        // パラメータ違いの同じ画面に遷移した場合は、OnInitializedが実行されず、ここが実行されるので注意。
        if (!string.IsNullOrWhiteSpace(Pagedata) && _format.PageData.TryGetValue(Pagedata, out _display!))
        {
            // 人格をセット
            _openAi.InitializeChat(_display);

            // 入力欄を作成
            backlogs.Add(new TrpgSession());
        }
        else
        {
            // 指定されたデータが見つからなかった時
            _display = null;
        }
        isLoaded = true;
        base.OnParametersSet();
    }

    /// <summary>
    /// 設定項目の入力完了
    /// </summary>
    private void SubmitOption()
    {
        isSubmittedOptions = true;
        _openAi.InitializeChat(_display!);
        StateHasChanged();
    }

    /// <summary>
    /// 子コンポーネントでAIメッセージを受信し終わった時の処理
    /// 終了判定
    /// 次のセッションを作成
    /// </summary>
    private async void NextSession()
    {
        backlogs.Add(new TrpgSession());
        StateHasChanged();
        if (_jsModule != null)
        {
            await _jsModule.InvokeVoidAsync("gotoBottom");
        }
    }


    public string ResetPromptText { get; set; } = string.Empty;
    /// <summary>
    /// 開発用
    /// プロンプトを入力されたものに差し替えて再スタート
    /// </summary>
    private void ResetPrompt(string text)
    {
        _openAi.InitializeChat(text);
        backlogs.Clear();
        backlogs.Add(new TrpgSession());
        StateHasChanged();
    }

}

