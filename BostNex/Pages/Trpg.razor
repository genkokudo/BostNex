@page "/trpg"
@using BostNex.Data
@using BostNex.Services
@using BostNex.Pages.Component
@using BostNexShared.Dto;
@inject IOpenAiService _openAi

<PageTitle>TRPG</PageTitle>

<h1>TRPG</h1>
<p>AIがTRPGのセッションをやってくれるようです。</p>

@if (backlogs == null)
{
    <p><em>Loading...</em></p>
    return;
}

@* 最初のお題 *@
<p><em>ここはよくある普通の剣と魔法のファンタジーRPGの世界。<br />物語はここから始まる。</em></p>

@* セッションの表示 *@
@foreach (var log in backlogs)
{
    //  物語の進行ごとに、繰り返して表示する
    <TrpgSessionPanel Session="log" OnSubmitFinished="() => NextSession()" />
}

@code {
    /// <summary>
    /// 今までのセッション
    /// </summary>
    private List<TrpgSession> backlogs = null!;

    /// <summary>
    /// 初期化
    /// </summary>
    override protected async Task OnInitializedAsync()
    {
        backlogs = new List<TrpgSession>();
        backlogs.Add(new TrpgSession());

        // GPTの初期化はセッション開始用のメソッドでやるか、GetNextSessionAsyncでやるか。
        // プロンプトをどこに置くかによるかなあ。
        // なので、取り敢えずプロンプトをここに書いておいてGetNextSessionAsyncする。
    }

    /// <summary>
    /// 子コンポーネントでAIメッセージを受信し終わった時の処理
    /// 終了判定
    /// 次のセッションを作成
    /// </summary>
    private void NextSession()
    {
        backlogs.Add(new TrpgSession());
        StateHasChanged();
    }

}

