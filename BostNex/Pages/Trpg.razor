@page "/trpg"
@using BostNex.Data
@using BostNex.Services
@using BostNex.Pages.Component
@using BostNexShared.Dto;
@inject IOpenAiService _openAi
@inject ITrpgService _trpg

<PageTitle>TRPG</PageTitle>

@if (backlogs == null)
{
    <p><em>Loading...</em></p>
    return;
}

<h1>ツン子とお話しよう！</h1>
@*<h1>TRPG</h1>
<p>AIがTRPGのセッションをやってくれるようです。</p>*@

@* 最初のお題 *@
@*<p><em>ここはよくある普通の剣と魔法のファンタジーRPGの世界。<br />物語はここから始まる。</em></p>*@

@* セッションの表示 *@
@foreach (var log in backlogs)
{
    //  物語の進行ごとに、繰り返して表示する
    <TrpgSessionPanel Session="log" OnSubmitFinished="() => NextSession()" />
}

@code {
    /// <summary>
    /// 今までのセッション
    /// </summary>
    private List<TrpgSession> backlogs = null!;

    /// <summary>
    /// 初期化
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        // 人格をセット
        _openAi.InitializeChat(_trpg.Tsunko);

        // 入力欄を作成
        backlogs = new List<TrpgSession>();
        backlogs.Add(new TrpgSession());
    }

    /// <summary>
    /// 子コンポーネントでAIメッセージを受信し終わった時の処理
    /// 終了判定
    /// 次のセッションを作成
    /// </summary>
    private void NextSession()
    {
        backlogs.Add(new TrpgSession());
        StateHasChanged();
    }

}

