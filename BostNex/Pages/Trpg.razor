@page "/trpg"
@page "/trpg/{pagedata}"
@using BostNex.Data
@using BostNex.Services
@using BostNex.Pages.Component
@using BostNexShared.Dto;
@inject IOpenAiService _openAi
@inject ITrpgService _trpg
@inject ITrpgFormatService _format;

<PageTitle>@(_display?.Title ?? "Loading")</PageTitle>

@if (!isLoaded)
{
    <p><em>Loading...</em></p>
    return;
}
else if (_display == null)
{
    <p><em>Not Found</em></p>
    return;
}

<h1>@_display.Headline</h1>
<p><em>@_display.Introduction</em></p>

@* セッションの表示 *@
@foreach (var log in backlogs)
{
    //  物語の進行ごとに、繰り返して表示する
    <TrpgSessionPanel Session="log" OnSubmitFinished="() => NextSession()" Placeholder="@_display.Placeholder" SubmitText="@_display.SubmitText" />
}

@code {
    [Parameter]
    public string? Pagedata { get; set; }

    private Display? _display;
    private bool isLoaded = false;

    /// <summary>
    /// 今までのセッション
    /// </summary>
    private List<TrpgSession> backlogs = null!;

    /// <summary>
    /// 初期化
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (!string.IsNullOrWhiteSpace(Pagedata) && _format.PageData.TryGetValue(Pagedata, out _display!))
        {
            // 人格をセット
            _openAi.InitializeChat(_display.Prompt);

            // 入力欄を作成
            backlogs = new List<TrpgSession>();
            backlogs.Add(new TrpgSession());
        }
        else
        {
            _display = null;
        }
        isLoaded = true;

    }

    /// <summary>
    /// 子コンポーネントでAIメッセージを受信し終わった時の処理
    /// 終了判定
    /// 次のセッションを作成
    /// </summary>
    private void NextSession()
    {
        backlogs.Add(new TrpgSession());
        StateHasChanged();
    }

}

