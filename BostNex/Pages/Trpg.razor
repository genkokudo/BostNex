@page "/trpg"
@using BostNex.Data
@using BostNex.Services
@using BostNex.Pages.Component
@using BostNexShared.Dto;
@inject OpenAiService _openAi

<PageTitle>TRPG</PageTitle>

<h1>TRPG</h1>
<p>AIがTRPGのセッションをやってくれるようです。</p>

@if (backlogs == null)
{
    <p><em>Loading...</em></p>
    return;
}

@* 最初のお題 *@
<p><em>ここはよくある普通の剣と魔法のファンタジーRPGの世界。<br />物語はここから始まる。</em></p>

@* セッションの表示 *@
@foreach (var log in backlogs)
{
    //  物語の進行ごとに、繰り返して表示する
    <TrpgSessionPanel Session="log"/>
    <br />
}

@code {
    /// <summary>
    /// 今までのセッション
    /// </summary>
    private List<TrpgSession> backlogs = null!;

    /// <summary>
    /// 初期化
    /// </summary>
    override protected async Task OnInitializedAsync()
    {
        backlogs = new List<TrpgSession>();
        backlogs.Add(new TrpgSession());
        
        // GPTの初期化はセッション開始用のメソッドでやるか、GetNextSessionAsyncでやるか。
        // プロンプトをどこに置くかによるかなあ。
        // なので、取り敢えずプロンプトをここに書いておいてGetNextSessionAsyncする。
    }

    /// <summary>
    /// 入力したテキストを送信して
    /// セッションを進める
    /// （backlogの一番最後を送る）
    /// </summary>
    /// <returns></returns>
    private async Task SubmitSessionAsync() // TODO:子コンポーネントでAIの返信が終わったことをここに伝えたい。これをコールバックとして子に送るべきかなあ？
    {
        //// test
        //var api = _openAi.Api;
        //// リクエスト
        //var lastLog = backlogs.Last();
        //var request = new OpenAI_API.Completions.CompletionRequest(
        //    lastLog.Text,
        //    OpenAI_API.Models.Model.DavinciText,
        //    200,
        //    0.5,
        //    presencePenalty: 0.1,
        //    frequencyPenalty: 0.1
        //);
        //var newSession = new TrpgSession();
        //backlogs.Add(newSession);
        //await foreach (var token in api.Completions.StreamCompletionEnumerableAsync(request))
        //{
        //    newSession.AiResponse = token.ToString();
        //    StateHasChanged();      // TODO:多分重いので、コンポーネント内でStateHasChangedする
        //}


        //
        //var lastLog = backlogs.Last();
        //backlogs.Add(
        //    new TrpgSession
        //        {
        //            AiResponse = await _openAi.GetNextSessionAsync(lastLog.Text)
        //        }
        //);
    }
}

