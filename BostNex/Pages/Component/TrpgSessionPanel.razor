@* ChatGPTとのやり取り1回分を表すコンポーネント *@
@* 
    データの大元は親が持ってないと何かと不便。
    データの元を子コンポーネントに持たせることはできるけど、後で親で集計する時などに結構不便だと思うのでやめておく。
*@
@using BostNex.Services
@using BostNexShared.Dto
@inject IOpenAiService _openAi
@inject ITrpgService _trpg
@inject ITrpgFormatService _format

@if (Session == null)
{
    <div class="spinner-border text-primary">
        <span class="visually-hidden">Loading...</span>
    </div>
    return;
}

<div class="@("row" + (IsDisposed ? " bg-secondary" : ""))">
    @* Userの入力 *@
    @if (Session.IsSubmitted)
    {
        <div class="d-flex flex-row justify-content-start mb-4 col-11">
            <img src="/Img/head_right.svg" alt="User" class="chat-icon">
            <div class="p-3 says mycomment mx-3">
                <p>@((MarkupString)Session.Text.Replace("\r\n", "<br />").Replace("\n", "<br />"))</p>
            </div>
        </div>
    }
    else
    {
        @* bind-Valueはフォーカスを解いたときにしか反映されないので注意 *@
        <InputTextArea class="col-12" @oninput="OnInput" @bind-Value="@Session.Text" placeholder="@Placeholder" rows="@rows" />
        <div class="col-4">
            <button class="mt-3 btn btn-primary" @onclick="SubmitSessionAsync" disabled="@IsDisableButton">@SubmitText</button>
            <button class="mt-3 ms-5 btn btn-primary" @onclick="RequestContinue" disabled="@Session.IsSubmitted">続きを要求する</button>
        </div>
        if (_isError)
        {
            <p class="text-danger">APIへの送信に失敗したのでもう一回送信してください</p>
        }
    }
    @* AIからの返事 *@
    @if (Session.IsSubmitted)
    {
        <div class="col-1" />
        <div class="d-flex flex-row justify-content-end mb-4 col-11">
            <div class="p-3 says aicomment mx-3">
                <p>@((MarkupString)Session.AiResponse.Replace("\r\n", "<br />").Replace("\n", "<br />"))</p>
            </div>
            <img src="/Img/head_left.svg" alt="Com" class="chat-icon">
        </div>
    }
</div>

@* ここからデバッグモード *@
@if (!_format.IsDebugMode)
{
    return;
}
@* エラーを表示 *@
<p class="text-danger">@_openAi.LastError</p>

@code {
    //@bind-Session
    [Parameter]
    [EditorRequired]
    public TrpgSession Session { get; set; } = null!;
    [Parameter]
    public EventCallback<TrpgSession> SessionChanged { get; set; }

    // 表示設定
    [Parameter]
    public string Placeholder { get; set; } = "喋ってみよう！";
    [Parameter]
    public string SubmitText { get; set; } = "送信";

    /// <summary>
    /// AIからの返信が終わった時の処理を指定する
    /// </summary>
    [Parameter]
    public Action OnSubmitFinished { get; set; } = null!;

    /// <summary>
    /// 入力されたテキスト（即時反映）
    /// 現在のBlazorではテキスト入力してもフォーカスを外さないとBind変数には反映されないため。
    /// </summary>
    private string _inputText = string.Empty;

    /// <summary>
    /// ボタン無効
    /// テキスト未入力ならばボタンを非活性にする。
    /// </summary>
    private bool IsDisableButton => string.IsNullOrWhiteSpace(_inputText) || Session.IsSubmitted;

    /// <summary>
    /// 入力行数
    /// </summary>
    private int rows = 3;

    /// <summary>
    /// エラーが出たら表示し、ユーザーに再送を促す
    /// </summary>
    private bool _isError = false;

    [Parameter]
    public List<string> CurrentChat { get; set; } = null!;

    /// <summary>
    /// これがtrueになっているメッセージはAPIにもう送信されないことを示す（表示のみで実際の制御は他の所で行う）
    /// </summary>
    private bool IsDisposed { get; set; } = false;

    protected override void OnParametersSet()
    {
        // 破棄判定をする
        if (Session.IsSubmitted && !IsDisposed && !CurrentChat.Contains(Session.AiResponse))
        {
            IsDisposed = true;  // 一旦破棄されたら基本的に復活しない
        }
        if (Session.IsSubmitted == false)   // 他から来たのにIsDisposedになってたら解除しておく
        {
            IsDisposed = false;
        }
        base.OnParametersSet();
    }

    /// <summary>
    /// 入力ごとに実行
    /// 入力テキストが空白か判定してボタン活性状態を変える。
    /// </summary>
    private void OnInput(ChangeEventArgs e)
    {
        _inputText = e.Value!.ToString()!;
        rows = Math.Max(3, _inputText.Length - _inputText.Replace("\n", "").Length + 1);
    }

    /// <summary>
    /// 続きを要求するボタン
    /// </summary>
    /// <returns></returns>
    private async Task RequestContinue()
    {
        if (Session.IsSubmitted)
        {
            return;
        }
        _inputText = "続きを書いて";
        Session.Text = "続きを書いて";
        await SubmitSessionAsync();
    }

    /// <summary>
    /// 入力したテキストを送信する
    /// </summary>
    /// <returns></returns>
    private async Task SubmitSessionAsync()
    {
        if (Session.IsSubmitted)
        {
            return;
        }

        Session.IsSubmitted = true;
        IsDisposed = false;
        _isError = false;
        try
        {
            var response = await _openAi.GetNextSessionAsync(_inputText);
            Session.AiResponse = response;
        }
        catch
        {
            Session.IsSubmitted = false;
            _isError = true;
            return;
        }

        // 終わったらバインド元に反映する
        await SessionChanged.InvokeAsync(Session);

        // セッションを進めることを親に伝える。
        if (OnSubmitFinished != null)
        {
            OnSubmitFinished.Invoke();
        }
    }

}
