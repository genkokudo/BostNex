@* TRPGのやり取り1回分を表すコンポーネント *@
@* 
    データの大本は親が持ってないと何かと不便。
    データの元を子コンポーネントに持たせることはできるけど、後で親で集計する時などに親からのアクセス方法が分からないのでやめておく。
    （コールバックメソッドをParameterにするとかぐらいかなあ）
*@
@using BostNex.Services
@using BostNexShared.Dto;
@inject OpenAiService _openAi
@inject TrpgService _trpg

@if (Session == null)
{
    <p><em>Loading...</em></p>
    return;
}

@* 問いに対する回答を入力する *@
<InputText @oninput="OnInput" @bind-Value="@Session.Text" />@* bind-Valueはフォーカスを解いたときにしか反映されないので使わないが、必須 *@
<br />
<button class="btn btn-primary" @onclick="SubmitSessionAsync" disabled="@IsDisableButton" hidden="@_isSubmitted">送信</button>

@* AIからの返事 *@
<p hidden="@(!_isSubmitted)"><em>@Session.AiResponse</em></p>

@code {
    [Parameter]
    public TrpgSession Session { get; set; } = null!;
    [Parameter]
    public EventCallback<TrpgSession> SessionChanged { get; set; }

    /// <summary>
    /// 入力されたテキスト（即時反映）
    /// 現在のBlazorではテキスト入力してもフォーカスを外さないとBind変数には反映されないため。
    /// </summary>
    private string _inputText = string.Empty;

    /// <summary>
    /// 送信ボタンを押したらtrue
    /// 以降はこのセッションに書き込めなくする。
    /// </summary>
    private bool _isSubmitted = false;

    /// <summary>
    /// ボタン無効
    /// テキスト未入力ならばボタンを非活性にする。
    /// </summary>
    private bool IsDisableButton => string.IsNullOrWhiteSpace(_inputText) || _isSubmitted;

    /// <summary>
    /// 入力ごとに実行
    /// 入力テキストが空白か判定してボタン活性状態を変える。
    /// </summary>
    private void OnInput(ChangeEventArgs e)
    {
        _inputText = e.Value!.ToString()!;
    }

    /// <summary>
    /// 入力したテキストを送信する
    /// </summary>
    /// <returns></returns>
    private async Task SubmitSessionAsync()
    {
        _isSubmitted = true;
        var api = _openAi.Api;
        
        // リクエスト作成＆送信
        var request = _trpg.GetTrpgRequest(_inputText);
        await foreach (var token in api.Completions.StreamCompletionEnumerableAsync(request))
        {
            Session.AiResponse += token.ToString();
            StateHasChanged();  // 徐々にテキストが表示されるようにここで逐次更新する
        }
        
        // 終わったらバインド元に反映する
        await SessionChanged.InvokeAsync(Session);
        // TODO:セッションを進めることを親に伝える。コールバックを

    }
}
