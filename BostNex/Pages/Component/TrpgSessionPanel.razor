@* TRPGのやり取り1回分を表すコンポーネント *@
@* 
    データの大本は親が持ってないと何かと不便。
    データの元を子コンポーネントに持たせることはできるけど、後で親で集計する時などに親からのアクセス方法が分からないのでやめておく。
*@
@using BostNex.Services
@using BostNexShared.Dto;
@inject IOpenAiService _openAi
@inject ITrpgService _trpg

@if (Session == null)
{
    <p><em>Loading...</em></p>
    return;
}

@* 問いに対する回答を入力する *@
<div class="row">
    @if (Session.IsSubmitted)
    {
        <p class="text-primary">@((MarkupString)Session.Text.Replace("\r\n", "<br />").Replace("\n", "<br />"))</p>
    }
    else
    {
        @* bind-Valueはフォーカスを解いたときにしか反映されないので注意 *@
        <InputTextArea class="col-12" @oninput="OnInput" @bind-Value="@Session.Text" placeholder="@Placeholder" rows="@rows" />
        <div class="col-4">
            <button class="mt-3 btn btn-primary" @onclick="SubmitSessionAsync" disabled="@IsDisableButton">@SubmitText</button>
        </div>
        if (_isError)
        {
            <p class="text-danger">何故か失敗したようだ、混んでるのかな？悪いがもう一回やってくれ</p>
        }
    }
</div>

@* AIからの返事 *@
<p hidden="@(!Session.IsSubmitted)"><em>@Session.AiResponse</em></p>

@code {
    //@bind-Session
    [Parameter]
    [EditorRequired]
    public TrpgSession Session { get; set; } = null!;
    [Parameter]
    public EventCallback<TrpgSession> SessionChanged { get; set; }

    // 表示設定
    [Parameter]
    public string Placeholder { get; set; } = "喋ってみよう！";
    [Parameter]
    public string SubmitText { get; set; } = "送信";

    /// <summary>
    /// AIからの返信が終わった時の処理を指定する
    /// </summary>
    [Parameter]
    public Action OnSubmitFinished { get; set; } = null!;

    /// <summary>
    /// 入力されたテキスト（即時反映）
    /// 現在のBlazorではテキスト入力してもフォーカスを外さないとBind変数には反映されないため。
    /// </summary>
    private string _inputText = string.Empty;

    /// <summary>
    /// ボタン無効
    /// テキスト未入力ならばボタンを非活性にする。
    /// </summary>
    private bool IsDisableButton => string.IsNullOrWhiteSpace(_inputText) || Session.IsSubmitted;

    /// <summary>
    /// 入力行数
    /// </summary>
    private int rows = 3;

    /// <summary>
    /// 
    /// </summary>
    private bool _isError = false;

    /// <summary>
    /// 入力ごとに実行
    /// 入力テキストが空白か判定してボタン活性状態を変える。
    /// </summary>
    private void OnInput(ChangeEventArgs e)
    {
        _inputText = e.Value!.ToString()!;
        rows = Math.Max(3, _inputText.Length - _inputText.Replace("\n", "").Length + 1);
    }

    /// <summary>
    /// 入力したテキストを送信する
    /// </summary>
    /// <returns></returns>
    private async Task SubmitSessionAsync()
    {
        Session.IsSubmitted = true;
        _isError = false;
        try
        {
            var response = await _openAi.GetNextSessionAsync(_inputText);
            Session.AiResponse = response;
        }
        catch
        {
            Session.IsSubmitted = false;
            _isError = true;
            return;
        }

        // 終わったらバインド元に反映する
        await SessionChanged.InvokeAsync(Session);

        // セッションを進めることを親に伝える。
        if (OnSubmitFinished != null)
        {
            OnSubmitFinished.Invoke();
        }
    }
}
