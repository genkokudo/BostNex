@* TRPGのやり取り1回分を表すコンポーネント *@
@* 
    データの大本は親が持ってないと何かと不便。
    データの元を子コンポーネントに持たせることはできるけど、後で親で集計する時などに親からのアクセス方法が分からないのでやめておく。
*@
@using BostNex.Services
@using BostNexShared.Dto;
@inject IOpenAiService _openAi
@inject ITrpgService _trpg

@if (Session == null)
{
    <p><em>Loading...</em></p>
    return;
}

@* 問いに対する回答を入力する *@
<div class="row">
    @if (_isSubmitted)
    {
        <p class="text-primary">@Session.Text</p>
    }
    else
    {
        @* bind-Valueはフォーカスを解いたときにしか反映されないので注意 *@
        <InputTextArea class="col-md-12" @oninput="OnInput" @bind-Value="@Session.Text" placeholder="あなたの行動を入力してください。" rows="@rows" />
        <div class="d-md-flex justify-content-md-end">
            <button class="col-md-4 mt-3 btn btn-primary" @onclick="SubmitSessionAsync" disabled="@IsDisableButton">送信</button>
        </div>
    }
</div>

@* AIからの返事 *@
<p hidden="@(!_isSubmitted)"><em>@Session.AiResponse</em></p>

@code {
    [Parameter]
    public TrpgSession Session { get; set; } = null!;
    [Parameter]
    public EventCallback<TrpgSession> SessionChanged { get; set; }

    /// <summary>
    /// AIからの返信が終わった時の処理を指定する
    /// </summary>
    [Parameter]
    public Action OnSubmitFinished { get; set; } = null!;

    /// <summary>
    /// 入力されたテキスト（即時反映）
    /// 現在のBlazorではテキスト入力してもフォーカスを外さないとBind変数には反映されないため。
    /// </summary>
    private string _inputText = string.Empty;

    /// <summary>
    /// 送信ボタンを押したらtrue
    /// 以降はこのセッションに書き込めなくする。
    /// </summary>
    private bool _isSubmitted = false;

    /// <summary>
    /// ボタン無効
    /// テキスト未入力ならばボタンを非活性にする。
    /// </summary>
    private bool IsDisableButton => string.IsNullOrWhiteSpace(_inputText) || _isSubmitted;

    /// <summary>
    /// 入力行数
    /// </summary>
    private int rows = 3;

    /// <summary>
    /// 入力ごとに実行
    /// 入力テキストが空白か判定してボタン活性状態を変える。
    /// </summary>
    private void OnInput(ChangeEventArgs e)
    {
        _inputText = e.Value!.ToString()!;
        rows = Math.Max(3, _inputText.Length - _inputText.Replace("\n", "").Length + 1);

    }

    /// <summary>
    /// 入力したテキストを送信する
    /// </summary>
    /// <returns></returns>
    private async Task SubmitSessionAsync()
    {
        _isSubmitted = true;
        var response =  await _openAi.GetNextSessionAsync(_inputText);

        // 終わったらバインド元に反映する
        Session.AiResponse = response;
        await SessionChanged.InvokeAsync(Session);

        // セッションを進めることを親に伝える。
        if (OnSubmitFinished != null)
        {
            OnSubmitFinished.Invoke();
        }
    }
}
